/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
bool compareInterval(Interval i1, Interval i2) 
{ 
    return (i1.start < i2.start); 
} 
vector<Interval> Solution::merge(vector<Interval> &A) {
    int n = A.size();
    vector <Interval> a1; 
    if (n <= 0) 
        return a1; 
  
    // Create an empty stack of intervals 
    stack<Interval> s; 
  
    // sort the intervals in increasing order of start time 
    sort(A.begin(), A.end(), compareInterval); 
  
    // push the first interval to stack 
    s.push(A[0]); 
  
    // Start from the next interval and merge if necessary 
    for (int i = 1 ; i < n; i++) 
    { 
        // get interval from stack top 
        Interval top = s.top(); 
  
        // if current interval is not overlapping with stack top, 
        // push it to the stack 
        if (top.end < A[i].start) 
            s.push(A[i]); 
  
        // Otherwise update the ending time of top if ending of current 
        // interval is more 
        else if (top.end < A[i].end) 
        { 
            top.end = A[i].end; 
            s.pop(); 
            s.push(top); 
        } 
    } 
  
    // Print contents of stack 
    while (!s.empty()) 
    { 
        Interval t = s.top(); 
        a1.push_back(t); 
        s.pop(); 
    } 
    sort(a1.begin(), a1.end(), compareInterval);
    return a1; 
}
